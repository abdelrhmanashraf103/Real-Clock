
Real Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000c7a  00000d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c2  008000c2  00000d70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dde  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00002d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c6  00000000  00000000  000037d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00004998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00004c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000114c  00000000  00000000  000052c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000640d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3c       	cpi	r26, 0xC8	; 200
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  8a:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <seven_seg_vinit>:
 */ 

#include "../../MCAL/DIO/DIO.h"
void seven_seg_vinit(unsigned char port_name)
{
	DIO_set_port_direction(port_name,0xFF);
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	0e 94 71 05 	call	0xae2	; 0xae2 <DIO_set_port_direction>
  98:	08 95       	ret

0000009a <seven_seg_write>:
}

void seven_seg_write(unsigned char portname,unsigned char number)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	2a 97       	sbiw	r28, 0x0a	; 10
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
  ae:	9a e0       	ldi	r25, 0x0A	; 10
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <seven_seg_write+0x1e>

DIO_write_port(portname,arr[number]);
  c0:	e1 e0       	ldi	r30, 0x01	; 1
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	ec 0f       	add	r30, r28
  c6:	fd 1f       	adc	r31, r29
  c8:	e6 0f       	add	r30, r22
  ca:	f1 1d       	adc	r31, r1
  cc:	60 81       	ld	r22, Z
  ce:	0e 94 84 05 	call	0xb08	; 0xb08 <DIO_write_port>
  d2:	2a 96       	adiw	r28, 0x0a	; 10
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <keypad_vInit>:
#include "keypad_driver.h"
#include <util/delay.h>
void keypad_vInit(void)
{
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	84 e4       	ldi	r24, 0x44	; 68
  ea:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	84 e4       	ldi	r24, 0x44	; 68
  f4:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	62 e0       	ldi	r22, 0x02	; 2
  fc:	84 e4       	ldi	r24, 0x44	; 68
  fe:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	84 e4       	ldi	r24, 0x44	; 68
 112:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	84 e4       	ldi	r24, 0x44	; 68
 11c:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	66 e0       	ldi	r22, 0x06	; 6
 124:	84 e4       	ldi	r24, 0x44	; 68
 126:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	67 e0       	ldi	r22, 0x07	; 7
 12e:	84 e4       	ldi	r24, 0x44	; 68
 130:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	84 e4       	ldi	r24, 0x44	; 68
 13a:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	65 e0       	ldi	r22, 0x05	; 5
 142:	84 e4       	ldi	r24, 0x44	; 68
 144:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	66 e0       	ldi	r22, 0x06	; 6
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	67 e0       	ldi	r22, 0x07	; 7
 156:	84 e4       	ldi	r24, 0x44	; 68
 158:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_vconnectpullup>
 15c:	08 95       	ret

0000015e <keypad_u8check_press>:
	/****************************************************/
}
uint8 keypad_u8check_press(void)
{
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	60 97       	sbiw	r28, 0x10	; 16
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	ea e6       	ldi	r30, 0x6A	; 106
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <keypad_u8check_press+0x24>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
 18a:	ff 24       	eor	r15, r15
 18c:	fa 94       	dec	r15
	for(row=0;row<4;row++)
 18e:	00 e0       	ldi	r16, 0x00	; 0
 190:	3c c0       	rjmp	.+120    	; 0x20a <keypad_u8check_press+0xac>
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	84 e4       	ldi	r24, 0x44	; 68
 198:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	84 e4       	ldi	r24, 0x44	; 68
 1a2:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	84 e4       	ldi	r24, 0x44	; 68
 1ac:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	84 e4       	ldi	r24, 0x44	; 68
 1b6:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	87 e8       	ldi	r24, 0x87	; 135
 1bc:	93 e1       	ldi	r25, 0x13	; 19
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <keypad_u8check_press+0x60>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <keypad_u8check_press+0x66>
 1c4:	00 00       	nop
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 2f       	mov	r22, r16
 1ca:	84 e4       	ldi	r24, 0x44	; 68
 1cc:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	18 c0       	rjmp	.+48     	; 0x204 <keypad_u8check_press+0xa6>
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	61 0f       	add	r22, r17
 1d8:	84 e4       	ldi	r24, 0x44	; 68
 1da:	0e 94 14 05 	call	0xa28	; 0xa28 <DIO_u8read>
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
 1de:	81 11       	cpse	r24, r1
 1e0:	10 c0       	rjmp	.+32     	; 0x202 <keypad_u8check_press+0xa4>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
 1e2:	e0 2f       	mov	r30, r16
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	8c 0f       	add	r24, r28
 1f4:	9d 1f       	adc	r25, r29
 1f6:	e8 0f       	add	r30, r24
 1f8:	f9 1f       	adc	r31, r25
 1fa:	e1 0f       	add	r30, r17
 1fc:	f1 1d       	adc	r31, r1
 1fe:	f0 80       	ld	r15, Z
				break; // break from the loop
 200:	03 c0       	rjmp	.+6      	; 0x208 <keypad_u8check_press+0xaa>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
 202:	1f 5f       	subi	r17, 0xFF	; 255
 204:	14 30       	cpi	r17, 0x04	; 4
 206:	30 f3       	brcs	.-52     	; 0x1d4 <keypad_u8check_press+0x76>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
 208:	0f 5f       	subi	r16, 0xFF	; 255
 20a:	04 30       	cpi	r16, 0x04	; 4
 20c:	10 f2       	brcs	.-124    	; 0x192 <keypad_u8check_press+0x34>
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
 20e:	8f 2d       	mov	r24, r15
 210:	60 96       	adiw	r28, 0x10	; 16
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	08 95       	ret

00000228 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('A',EN,1);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
 232:	8f e9       	ldi	r24, 0x9F	; 159
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <send_falling_edge+0xe>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <send_falling_edge+0x14>
 23c:	00 00       	nop
	_delay_ms(2);
	DIO_write('A',EN,0);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
 248:	8f e9       	ldi	r24, 0x9F	; 159
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <send_falling_edge+0x24>
 250:	00 c0       	rjmp	.+0      	; 0x252 <send_falling_edge+0x2a>
 252:	00 00       	nop
 254:	08 95       	ret

00000256 <LCD_vSend_cmd>:
	_delay_ms(2);
}
void LCD_vSend_cmd(char cmd)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
 25a:	68 2f       	mov	r22, r24
 25c:	62 95       	swap	r22
 25e:	6f 70       	andi	r22, 0x0F	; 15
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_high_nibble>
	DIO_write('A',RS,0);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	send_falling_edge();
 270:	0e 94 14 01 	call	0x228	; 0x228 <send_falling_edge>
	write_high_nibble('A',cmd);
 274:	6c 2f       	mov	r22, r28
 276:	81 e4       	ldi	r24, 0x41	; 65
 278:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_high_nibble>
	DIO_write('A',RS,0);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	send_falling_edge();
 286:	0e 94 14 01 	call	0x228	; 0x228 <send_falling_edge>
 28a:	8f ec       	ldi	r24, 0xCF	; 207
 28c:	97 e0       	ldi	r25, 0x07	; 7
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_vSend_cmd+0x38>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_vSend_cmd+0x3e>
 294:	00 00       	nop
	#endif
	_delay_ms(1);
}
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <LCD_vInit>:
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	81 ee       	ldi	r24, 0xE1	; 225
 29e:	94 e0       	ldi	r25, 0x04	; 4
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <LCD_vInit+0x6>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_vInit+0x10>
 2aa:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	64 e0       	ldi	r22, 0x04	; 4
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	81 e4       	ldi	r24, 0x41	; 65
 2bc:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	66 e0       	ldi	r22, 0x06	; 6
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	67 e0       	ldi	r22, 0x07	; 7
 2ce:	81 e4       	ldi	r24, 0x41	; 65
 2d0:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e4       	ldi	r24, 0x41	; 65
 2da:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 34 04 	call	0x868	; 0x868 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	81 e4       	ldi	r24, 0x41	; 65
 2f8:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <LCD_vInit+0x6c>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <LCD_vInit+0x72>
 30c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
 30e:	88 e2       	ldi	r24, 0x28	; 40
 310:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 314:	8f ec       	ldi	r24, 0xCF	; 207
 316:	97 e0       	ldi	r25, 0x07	; 7
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_vInit+0x7e>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_vInit+0x84>
 31e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 320:	8e e0       	ldi	r24, 0x0E	; 14
 322:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 326:	8f ec       	ldi	r24, 0xCF	; 207
 328:	97 e0       	ldi	r25, 0x07	; 7
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_vInit+0x90>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_vInit+0x96>
 330:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 338:	8f e1       	ldi	r24, 0x1F	; 31
 33a:	9e e4       	ldi	r25, 0x4E	; 78
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_vInit+0xa2>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_vInit+0xa8>
 342:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 344:	86 e0       	ldi	r24, 0x06	; 6
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 34a:	8f ec       	ldi	r24, 0xCF	; 207
 34c:	97 e0       	ldi	r25, 0x07	; 7
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <LCD_vInit+0xb4>
 352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_vInit+0xba>
 354:	00 00       	nop
 356:	08 95       	ret

00000358 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
 35c:	68 2f       	mov	r22, r24
 35e:	62 95       	swap	r22
 360:	6f 70       	andi	r22, 0x0F	; 15
 362:	81 e4       	ldi	r24, 0x41	; 65
 364:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_high_nibble>
	DIO_write('A',RS,1);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	send_falling_edge();
 372:	0e 94 14 01 	call	0x228	; 0x228 <send_falling_edge>
	write_high_nibble('A',data);
 376:	6c 2f       	mov	r22, r28
 378:	81 e4       	ldi	r24, 0x41	; 65
 37a:	0e 94 07 06 	call	0xc0e	; 0xc0e <write_high_nibble>
	DIO_write('A',RS,1);
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	81 e4       	ldi	r24, 0x41	; 65
 384:	0e 94 a4 04 	call	0x948	; 0x948 <DIO_write>
	send_falling_edge();
 388:	0e 94 14 01 	call	0x228	; 0x228 <send_falling_edge>
 38c:	8f ec       	ldi	r24, 0xCF	; 207
 38e:	97 e0       	ldi	r25, 0x07	; 7
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_vSend_char+0x38>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_vSend_char+0x3e>
 396:	00 00       	nop
	#endif
	_delay_ms(1);
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
 3a4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
		data++;
 3a8:	21 96       	adiw	r28, 0x01	; 1
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 3aa:	88 81       	ld	r24, Y
 3ac:	81 11       	cpse	r24, r1
 3ae:	fa cf       	rjmp	.-12     	; 0x3a4 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 3bc:	8f e1       	ldi	r24, 0x1F	; 31
 3be:	9e e4       	ldi	r25, 0x4E	; 78
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_clearscreen+0xa>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_clearscreen+0x10>
 3c6:	00 00       	nop
 3c8:	08 95       	ret

000003ca <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 3ca:	9f ef       	ldi	r25, 0xFF	; 255
 3cc:	98 0f       	add	r25, r24
 3ce:	92 30       	cpi	r25, 0x02	; 2
 3d0:	70 f4       	brcc	.+28     	; 0x3ee <LCD_movecursor+0x24>
 3d2:	61 31       	cpi	r22, 0x11	; 17
 3d4:	70 f4       	brcc	.+28     	; 0x3f2 <LCD_movecursor+0x28>
 3d6:	66 23       	and	r22, r22
 3d8:	71 f0       	breq	.+28     	; 0x3f6 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 3de:	2f e7       	ldi	r18, 0x7F	; 127
 3e0:	26 0f       	add	r18, r22
 3e2:	0a c0       	rjmp	.+20     	; 0x3f8 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	41 f4       	brne	.+16     	; 0x3f8 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 3e8:	2f eb       	ldi	r18, 0xBF	; 191
 3ea:	26 0f       	add	r18, r22
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 3ee:	20 e8       	ldi	r18, 0x80	; 128
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <LCD_movecursor+0x2e>
 3f2:	20 e8       	ldi	r18, 0x80	; 128
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <LCD_movecursor+0x2e>
 3f6:	20 e8       	ldi	r18, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 3f8:	82 2f       	mov	r24, r18
 3fa:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_vSend_cmd>
 3fe:	8f ec       	ldi	r24, 0xCF	; 207
 400:	97 e0       	ldi	r25, 0x07	; 7
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	08 95       	ret

0000040c <main>:
uint8 key_pressed;
uint8 left_digit;
uint8 right_digit;
int main(void)
{
	LCD_vInit();
 40c:	0e 94 4d 01 	call	0x29a	; 0x29a <LCD_vInit>
	keypad_vInit();
 410:	0e 94 72 00 	call	0xe4	; 0xe4 <keypad_vInit>
	seven_seg_vinit(PORT_B);
 414:	82 e4       	ldi	r24, 0x42	; 66
 416:	0e 94 49 00 	call	0x92	; 0x92 <seven_seg_vinit>
	timer2_overflow_init_interrupt();
 41a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <timer2_overflow_init_interrupt>
	SET_BIT(DDRC,0);
 41e:	84 b3       	in	r24, 0x14	; 20
 420:	81 60       	ori	r24, 0x01	; 1
 422:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,1);
 424:	84 b3       	in	r24, 0x14	; 20
 426:	82 60       	ori	r24, 0x02	; 2
 428:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,2);
 42a:	84 b3       	in	r24, 0x14	; 20
 42c:	84 60       	ori	r24, 0x04	; 4
 42e:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,3);
 430:	84 b3       	in	r24, 0x14	; 20
 432:	88 60       	ori	r24, 0x08	; 8
 434:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,4);
 436:	84 b3       	in	r24, 0x14	; 20
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,5);
 43c:	84 b3       	in	r24, 0x14	; 20
 43e:	80 62       	ori	r24, 0x20	; 32
 440:	84 bb       	out	0x14, r24	; 20
	LCD_vSend_string("press ON/C to");
 442:	8a e7       	ldi	r24, 0x7A	; 122
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
	LCD_movecursor(2,1);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_movecursor>
	LCD_vSend_string("set your clock");
 452:	88 e8       	ldi	r24, 0x88	; 136
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
	
    
    while (1) 
    {
		key_pressed=keypad_u8check_press();
 45a:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 45e:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <key_pressed>
		if (key_pressed!=NOTPRESSED)
 462:	8f 3f       	cpi	r24, 0xFF	; 255
 464:	09 f4       	brne	.+2      	; 0x468 <main+0x5c>
 466:	ef c0       	rjmp	.+478    	; 0x646 <main+0x23a>
		{
			if (key_pressed=='A')
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	09 f0       	breq	.+2      	; 0x46e <main+0x62>
 46c:	cf c0       	rjmp	.+414    	; 0x60c <main+0x200>
			{
				LCD_clearscreen();
 46e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
				LCD_vSend_string("hours=--");
 472:	87 e9       	ldi	r24, 0x97	; 151
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
				LCD_movecursor(1,7);
 47a:	67 e0       	ldi	r22, 0x07	; 7
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_movecursor>
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	84 e3       	ldi	r24, 0x34	; 52
 486:	9c e0       	ldi	r25, 0x0C	; 12
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x7c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <main+0x86>
 492:	00 00       	nop
				_delay_ms(500);
				do 
				{
					left_digit=keypad_u8check_press();
 494:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 498:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <left_digit>
				} while (left_digit==NOTPRESSED);
 49c:	8f 3f       	cpi	r24, 0xFF	; 255
 49e:	d1 f3       	breq	.-12     	; 0x494 <main+0x88>
				LCD_vSend_char(left_digit);
 4a0:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 4a4:	2f ef       	ldi	r18, 0xFF	; 255
 4a6:	82 e5       	ldi	r24, 0x52	; 82
 4a8:	97 e0       	ldi	r25, 0x07	; 7
 4aa:	21 50       	subi	r18, 0x01	; 1
 4ac:	80 40       	sbci	r24, 0x00	; 0
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x9e>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0xa8>
 4b4:	00 00       	nop
				_delay_ms(300);
				do
				{
					right_digit=keypad_u8check_press();
 4b6:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 4ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <right_digit>
				} while (right_digit==NOTPRESSED);
 4be:	8f 3f       	cpi	r24, 0xFF	; 255
 4c0:	d1 f3       	breq	.-12     	; 0x4b6 <main+0xaa>
				LCD_vSend_char(right_digit);
 4c2:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	82 e5       	ldi	r24, 0x52	; 82
 4ca:	97 e0       	ldi	r25, 0x07	; 7
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0xc0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0xca>
 4d6:	00 00       	nop
				_delay_ms(300);
				hours_counter = (left_digit-48)*10 +(right_digit-48);
 4d8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <left_digit>
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	c0 97       	sbiw	r24, 0x30	; 48
 4e0:	88 0f       	add	r24, r24
 4e2:	98 2f       	mov	r25, r24
 4e4:	99 0f       	add	r25, r25
 4e6:	99 0f       	add	r25, r25
 4e8:	89 0f       	add	r24, r25
 4ea:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <right_digit>
 4ee:	89 0f       	add	r24, r25
 4f0:	80 53       	subi	r24, 0x30	; 48
 4f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
				LCD_clearscreen();
 4f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
				
				LCD_vSend_string("minutes=--");
 4fa:	80 ea       	ldi	r24, 0xA0	; 160
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
				LCD_movecursor(1,9);
 502:	69 e0       	ldi	r22, 0x09	; 9
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_movecursor>
 50a:	2f ef       	ldi	r18, 0xFF	; 255
 50c:	82 e5       	ldi	r24, 0x52	; 82
 50e:	97 e0       	ldi	r25, 0x07	; 7
 510:	21 50       	subi	r18, 0x01	; 1
 512:	80 40       	sbci	r24, 0x00	; 0
 514:	90 40       	sbci	r25, 0x00	; 0
 516:	e1 f7       	brne	.-8      	; 0x510 <main+0x104>
 518:	00 c0       	rjmp	.+0      	; 0x51a <main+0x10e>
 51a:	00 00       	nop
				_delay_ms(300);
				do
				{
					left_digit=keypad_u8check_press();
 51c:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 520:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <left_digit>
				} while (left_digit==NOTPRESSED);
 524:	8f 3f       	cpi	r24, 0xFF	; 255
 526:	d1 f3       	breq	.-12     	; 0x51c <main+0x110>
				LCD_vSend_char(left_digit);
 528:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 52c:	2f ef       	ldi	r18, 0xFF	; 255
 52e:	82 e5       	ldi	r24, 0x52	; 82
 530:	97 e0       	ldi	r25, 0x07	; 7
 532:	21 50       	subi	r18, 0x01	; 1
 534:	80 40       	sbci	r24, 0x00	; 0
 536:	90 40       	sbci	r25, 0x00	; 0
 538:	e1 f7       	brne	.-8      	; 0x532 <main+0x126>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <main+0x130>
 53c:	00 00       	nop
				_delay_ms(300);
				do
				{
					right_digit=keypad_u8check_press();
 53e:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 542:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <right_digit>
				} while (right_digit==NOTPRESSED);
 546:	8f 3f       	cpi	r24, 0xFF	; 255
 548:	d1 f3       	breq	.-12     	; 0x53e <main+0x132>
				LCD_vSend_char(right_digit);
 54a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	82 e5       	ldi	r24, 0x52	; 82
 552:	97 e0       	ldi	r25, 0x07	; 7
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <main+0x148>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0x152>
 55e:	00 00       	nop
				_delay_ms(300);
				minutes_counter = (left_digit-48)*10 +(right_digit-48);
 560:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <left_digit>
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	c0 97       	sbiw	r24, 0x30	; 48
 568:	88 0f       	add	r24, r24
 56a:	98 2f       	mov	r25, r24
 56c:	99 0f       	add	r25, r25
 56e:	99 0f       	add	r25, r25
 570:	89 0f       	add	r24, r25
 572:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <right_digit>
 576:	89 0f       	add	r24, r25
 578:	80 53       	subi	r24, 0x30	; 48
 57a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <minutes_counter>
				LCD_clearscreen();
 57e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
				LCD_vSend_string("Second=--");
 582:	8b ea       	ldi	r24, 0xAB	; 171
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
				LCD_movecursor(1,8);
 58a:	68 e0       	ldi	r22, 0x08	; 8
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_movecursor>
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	82 e5       	ldi	r24, 0x52	; 82
 596:	97 e0       	ldi	r25, 0x07	; 7
 598:	21 50       	subi	r18, 0x01	; 1
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <main+0x18c>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <main+0x196>
 5a2:	00 00       	nop
				_delay_ms(300);
				do
				{
					left_digit=keypad_u8check_press();
 5a4:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 5a8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <left_digit>
				} while (left_digit==NOTPRESSED);
 5ac:	8f 3f       	cpi	r24, 0xFF	; 255
 5ae:	d1 f3       	breq	.-12     	; 0x5a4 <main+0x198>
				LCD_vSend_char(left_digit);
 5b0:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 5b4:	2f ef       	ldi	r18, 0xFF	; 255
 5b6:	81 ee       	ldi	r24, 0xE1	; 225
 5b8:	94 e0       	ldi	r25, 0x04	; 4
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	80 40       	sbci	r24, 0x00	; 0
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0x1ae>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <main+0x1b8>
 5c4:	00 00       	nop
				_delay_ms(200);
				do
				{
					right_digit=keypad_u8check_press();
 5c6:	0e 94 af 00 	call	0x15e	; 0x15e <keypad_u8check_press>
 5ca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <right_digit>
				} while (right_digit==NOTPRESSED);
 5ce:	8f 3f       	cpi	r24, 0xFF	; 255
 5d0:	d1 f3       	breq	.-12     	; 0x5c6 <main+0x1ba>
				LCD_vSend_char(right_digit);
 5d2:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_vSend_char>
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	81 ee       	ldi	r24, 0xE1	; 225
 5da:	94 e0       	ldi	r25, 0x04	; 4
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x1d0>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x1da>
 5e6:	00 00       	nop
				_delay_ms(200);
				seconds_counter = (left_digit-48)*10 +(right_digit-48);
 5e8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <left_digit>
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	c0 97       	sbiw	r24, 0x30	; 48
 5f0:	88 0f       	add	r24, r24
 5f2:	98 2f       	mov	r25, r24
 5f4:	99 0f       	add	r25, r25
 5f6:	99 0f       	add	r25, r25
 5f8:	89 0f       	add	r24, r25
 5fa:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <right_digit>
 5fe:	89 0f       	add	r24, r25
 600:	80 53       	subi	r24, 0x30	; 48
 602:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <seconds_counter>
				LCD_clearscreen();
 606:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
 60a:	1d c0       	rjmp	.+58     	; 0x646 <main+0x23a>
			}
			else
			{
				LCD_clearscreen();
 60c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
				LCD_vSend_string("Wrong Input");
 610:	85 eb       	ldi	r24, 0xB5	; 181
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
 618:	2f ef       	ldi	r18, 0xFF	; 255
 61a:	89 e6       	ldi	r24, 0x69	; 105
 61c:	98 e1       	ldi	r25, 0x18	; 24
 61e:	21 50       	subi	r18, 0x01	; 1
 620:	80 40       	sbci	r24, 0x00	; 0
 622:	90 40       	sbci	r25, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <main+0x212>
 626:	00 c0       	rjmp	.+0      	; 0x628 <main+0x21c>
 628:	00 00       	nop
				_delay_ms(1000);
				LCD_clearscreen();
 62a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_clearscreen>
				LCD_vSend_string("press ON/C to");
 62e:	8a e7       	ldi	r24, 0x7A	; 122
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
				LCD_movecursor(2,1);
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_movecursor>
				LCD_vSend_string("set your clock");
 63e:	88 e8       	ldi	r24, 0x88	; 136
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 ce 01 	call	0x39c	; 0x39c <LCD_vSend_string>
			}
		}
		SET_BIT(PORTC,1);
 646:	85 b3       	in	r24, 0x15	; 21
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,2);
 64c:	85 b3       	in	r24, 0x15	; 21
 64e:	84 60       	ori	r24, 0x04	; 4
 650:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,3);
 652:	85 b3       	in	r24, 0x15	; 21
 654:	88 60       	ori	r24, 0x08	; 8
 656:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,4);
 658:	85 b3       	in	r24, 0x15	; 21
 65a:	80 61       	ori	r24, 0x10	; 16
 65c:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,5);
 65e:	85 b3       	in	r24, 0x15	; 21
 660:	80 62       	ori	r24, 0x20	; 32
 662:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,0);
 664:	85 b3       	in	r24, 0x15	; 21
 666:	8e 7f       	andi	r24, 0xFE	; 254
 668:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,seconds_counter%10);
 66a:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <seconds_counter>
 66e:	cd ec       	ldi	r28, 0xCD	; 205
 670:	6c 9f       	mul	r22, r28
 672:	81 2d       	mov	r24, r1
 674:	11 24       	eor	r1, r1
 676:	86 95       	lsr	r24
 678:	86 95       	lsr	r24
 67a:	86 95       	lsr	r24
 67c:	88 0f       	add	r24, r24
 67e:	98 2f       	mov	r25, r24
 680:	99 0f       	add	r25, r25
 682:	99 0f       	add	r25, r25
 684:	89 0f       	add	r24, r25
 686:	68 1b       	sub	r22, r24
 688:	82 e4       	ldi	r24, 0x42	; 66
 68a:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 68e:	8f e0       	ldi	r24, 0x0F	; 15
 690:	97 e2       	ldi	r25, 0x27	; 39
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <main+0x286>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x28c>
 698:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
 69a:	85 b3       	in	r24, 0x15	; 21
 69c:	81 60       	ori	r24, 0x01	; 1
 69e:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,2);
 6a0:	85 b3       	in	r24, 0x15	; 21
 6a2:	84 60       	ori	r24, 0x04	; 4
 6a4:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,3);
 6a6:	85 b3       	in	r24, 0x15	; 21
 6a8:	88 60       	ori	r24, 0x08	; 8
 6aa:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,4);
 6ac:	85 b3       	in	r24, 0x15	; 21
 6ae:	80 61       	ori	r24, 0x10	; 16
 6b0:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,5);
 6b2:	85 b3       	in	r24, 0x15	; 21
 6b4:	80 62       	ori	r24, 0x20	; 32
 6b6:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,1);
 6b8:	85 b3       	in	r24, 0x15	; 21
 6ba:	8d 7f       	andi	r24, 0xFD	; 253
 6bc:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,seconds_counter/10);
 6be:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <seconds_counter>
 6c2:	6c 9f       	mul	r22, r28
 6c4:	61 2d       	mov	r22, r1
 6c6:	11 24       	eor	r1, r1
 6c8:	66 95       	lsr	r22
 6ca:	66 95       	lsr	r22
 6cc:	66 95       	lsr	r22
 6ce:	82 e4       	ldi	r24, 0x42	; 66
 6d0:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 6d4:	8f e0       	ldi	r24, 0x0F	; 15
 6d6:	97 e2       	ldi	r25, 0x27	; 39
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <main+0x2cc>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <main+0x2d2>
 6de:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,1);
 6e0:	85 b3       	in	r24, 0x15	; 21
 6e2:	82 60       	ori	r24, 0x02	; 2
 6e4:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,0);
 6e6:	85 b3       	in	r24, 0x15	; 21
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,3);
 6ec:	85 b3       	in	r24, 0x15	; 21
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,4);
 6f2:	85 b3       	in	r24, 0x15	; 21
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,5);
 6f8:	85 b3       	in	r24, 0x15	; 21
 6fa:	80 62       	ori	r24, 0x20	; 32
 6fc:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,2);
 6fe:	85 b3       	in	r24, 0x15	; 21
 700:	8b 7f       	andi	r24, 0xFB	; 251
 702:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,minutes_counter%10);
 704:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <minutes_counter>
 708:	6c 9f       	mul	r22, r28
 70a:	81 2d       	mov	r24, r1
 70c:	11 24       	eor	r1, r1
 70e:	86 95       	lsr	r24
 710:	86 95       	lsr	r24
 712:	86 95       	lsr	r24
 714:	88 0f       	add	r24, r24
 716:	98 2f       	mov	r25, r24
 718:	99 0f       	add	r25, r25
 71a:	99 0f       	add	r25, r25
 71c:	89 0f       	add	r24, r25
 71e:	68 1b       	sub	r22, r24
 720:	82 e4       	ldi	r24, 0x42	; 66
 722:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 726:	8f e0       	ldi	r24, 0x0F	; 15
 728:	97 e2       	ldi	r25, 0x27	; 39
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <main+0x31e>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x324>
 730:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,1);
 732:	85 b3       	in	r24, 0x15	; 21
 734:	82 60       	ori	r24, 0x02	; 2
 736:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,2);
 738:	85 b3       	in	r24, 0x15	; 21
 73a:	84 60       	ori	r24, 0x04	; 4
 73c:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,0);
 73e:	85 b3       	in	r24, 0x15	; 21
 740:	81 60       	ori	r24, 0x01	; 1
 742:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,4);
 744:	85 b3       	in	r24, 0x15	; 21
 746:	80 61       	ori	r24, 0x10	; 16
 748:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,5);
 74a:	85 b3       	in	r24, 0x15	; 21
 74c:	80 62       	ori	r24, 0x20	; 32
 74e:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,3);
 750:	85 b3       	in	r24, 0x15	; 21
 752:	87 7f       	andi	r24, 0xF7	; 247
 754:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,minutes_counter/10);
 756:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <minutes_counter>
 75a:	6c 9f       	mul	r22, r28
 75c:	61 2d       	mov	r22, r1
 75e:	11 24       	eor	r1, r1
 760:	66 95       	lsr	r22
 762:	66 95       	lsr	r22
 764:	66 95       	lsr	r22
 766:	82 e4       	ldi	r24, 0x42	; 66
 768:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 76c:	8f e0       	ldi	r24, 0x0F	; 15
 76e:	97 e2       	ldi	r25, 0x27	; 39
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <main+0x364>
 774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x36a>
 776:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,1);
 778:	85 b3       	in	r24, 0x15	; 21
 77a:	82 60       	ori	r24, 0x02	; 2
 77c:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,2);
 77e:	85 b3       	in	r24, 0x15	; 21
 780:	84 60       	ori	r24, 0x04	; 4
 782:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,3);
 784:	85 b3       	in	r24, 0x15	; 21
 786:	88 60       	ori	r24, 0x08	; 8
 788:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,0);
 78a:	85 b3       	in	r24, 0x15	; 21
 78c:	81 60       	ori	r24, 0x01	; 1
 78e:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,5);
 790:	85 b3       	in	r24, 0x15	; 21
 792:	80 62       	ori	r24, 0x20	; 32
 794:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,4);
 796:	85 b3       	in	r24, 0x15	; 21
 798:	8f 7e       	andi	r24, 0xEF	; 239
 79a:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,hours_counter%10);
 79c:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 7a0:	6c 9f       	mul	r22, r28
 7a2:	81 2d       	mov	r24, r1
 7a4:	11 24       	eor	r1, r1
 7a6:	86 95       	lsr	r24
 7a8:	86 95       	lsr	r24
 7aa:	86 95       	lsr	r24
 7ac:	88 0f       	add	r24, r24
 7ae:	98 2f       	mov	r25, r24
 7b0:	99 0f       	add	r25, r25
 7b2:	99 0f       	add	r25, r25
 7b4:	89 0f       	add	r24, r25
 7b6:	68 1b       	sub	r22, r24
 7b8:	82 e4       	ldi	r24, 0x42	; 66
 7ba:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 7be:	8f e0       	ldi	r24, 0x0F	; 15
 7c0:	97 e2       	ldi	r25, 0x27	; 39
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <main+0x3b6>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <main+0x3bc>
 7c8:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,1);
 7ca:	85 b3       	in	r24, 0x15	; 21
 7cc:	82 60       	ori	r24, 0x02	; 2
 7ce:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,2);
 7d0:	85 b3       	in	r24, 0x15	; 21
 7d2:	84 60       	ori	r24, 0x04	; 4
 7d4:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,3);
 7d6:	85 b3       	in	r24, 0x15	; 21
 7d8:	88 60       	ori	r24, 0x08	; 8
 7da:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,4);
 7dc:	85 b3       	in	r24, 0x15	; 21
 7de:	80 61       	ori	r24, 0x10	; 16
 7e0:	85 bb       	out	0x15, r24	; 21
		SET_BIT(PORTC,0);
 7e2:	85 b3       	in	r24, 0x15	; 21
 7e4:	81 60       	ori	r24, 0x01	; 1
 7e6:	85 bb       	out	0x15, r24	; 21
		CLR_BIT(PORTC,5);
 7e8:	85 b3       	in	r24, 0x15	; 21
 7ea:	8f 7d       	andi	r24, 0xDF	; 223
 7ec:	85 bb       	out	0x15, r24	; 21
		seven_seg_write(PORT_B,hours_counter/10);
 7ee:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <__data_end>
 7f2:	6c 9f       	mul	r22, r28
 7f4:	61 2d       	mov	r22, r1
 7f6:	11 24       	eor	r1, r1
 7f8:	66 95       	lsr	r22
 7fa:	66 95       	lsr	r22
 7fc:	66 95       	lsr	r22
 7fe:	82 e4       	ldi	r24, 0x42	; 66
 800:	0e 94 4d 00 	call	0x9a	; 0x9a <seven_seg_write>
 804:	8f e0       	ldi	r24, 0x0F	; 15
 806:	97 e2       	ldi	r25, 0x27	; 39
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
		_delay_ms(5);
		
		if (seconds_counter=60)
 810:	8c e3       	ldi	r24, 0x3C	; 60
 812:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <seconds_counter>
		{
			seconds_counter=0;
 816:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <seconds_counter>
			minutes_counter++;
 81a:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <minutes_counter>
 81e:	8f 5f       	subi	r24, 0xFF	; 255
 820:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <minutes_counter>
		}
		if (minutes_counter>=60)
 824:	8c 33       	cpi	r24, 0x3C	; 60
 826:	38 f0       	brcs	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
		{
			minutes_counter=0;
 828:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <minutes_counter>
			hours_counter++;
 82c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
 830:	8f 5f       	subi	r24, 0xFF	; 255
 832:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
		}
		if (hours_counter==24)
 836:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
 83a:	88 31       	cpi	r24, 0x18	; 24
 83c:	09 f0       	breq	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83e:	0d ce       	rjmp	.-998    	; 0x45a <main+0x4e>
		{
			hours_counter=0;
 840:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end>
 844:	0a ce       	rjmp	.-1004   	; 0x45a <main+0x4e>

00000846 <__vector_5>:
		}
    }
}
ISR(TIMER2_OVF_vect)
{
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	8f 93       	push	r24
	seconds_counter++;
 852:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <seconds_counter>
 856:	8f 5f       	subi	r24, 0xFF	; 255
 858:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <seconds_counter>
}
 85c:	8f 91       	pop	r24
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <DIO_vsetPINDir>:
		case PORT_C:
		PORTC&=0xf0;
		PORTC|=value;
		case PORT_D:
		PORTD&=0xf0;
		PORTD|=value;
 868:	82 34       	cpi	r24, 0x42	; 66
 86a:	19 f1       	breq	.+70     	; 0x8b2 <DIO_vsetPINDir+0x4a>
 86c:	18 f4       	brcc	.+6      	; 0x874 <DIO_vsetPINDir+0xc>
 86e:	81 34       	cpi	r24, 0x41	; 65
 870:	39 f0       	breq	.+14     	; 0x880 <DIO_vsetPINDir+0x18>
 872:	08 95       	ret
 874:	83 34       	cpi	r24, 0x43	; 67
 876:	b1 f1       	breq	.+108    	; 0x8e4 <DIO_vsetPINDir+0x7c>
 878:	84 34       	cpi	r24, 0x44	; 68
 87a:	09 f4       	brne	.+2      	; 0x87e <DIO_vsetPINDir+0x16>
 87c:	4c c0       	rjmp	.+152    	; 0x916 <DIO_vsetPINDir+0xae>
 87e:	08 95       	ret
 880:	41 30       	cpi	r20, 0x01	; 1
 882:	59 f4       	brne	.+22     	; 0x89a <DIO_vsetPINDir+0x32>
 884:	2a b3       	in	r18, 0x1a	; 26
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <DIO_vsetPINDir+0x28>
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	6a 95       	dec	r22
 892:	e2 f7       	brpl	.-8      	; 0x88c <DIO_vsetPINDir+0x24>
 894:	82 2b       	or	r24, r18
 896:	8a bb       	out	0x1a, r24	; 26
 898:	08 95       	ret
 89a:	2a b3       	in	r18, 0x1a	; 26
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <DIO_vsetPINDir+0x3e>
 8a2:	88 0f       	add	r24, r24
 8a4:	99 1f       	adc	r25, r25
 8a6:	6a 95       	dec	r22
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <DIO_vsetPINDir+0x3a>
 8aa:	80 95       	com	r24
 8ac:	82 23       	and	r24, r18
 8ae:	8a bb       	out	0x1a, r24	; 26
 8b0:	08 95       	ret
 8b2:	41 30       	cpi	r20, 0x01	; 1
 8b4:	59 f4       	brne	.+22     	; 0x8cc <DIO_vsetPINDir+0x64>
 8b6:	27 b3       	in	r18, 0x17	; 23
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <DIO_vsetPINDir+0x5a>
 8be:	88 0f       	add	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	6a 95       	dec	r22
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <DIO_vsetPINDir+0x56>
 8c6:	82 2b       	or	r24, r18
 8c8:	87 bb       	out	0x17, r24	; 23
 8ca:	08 95       	ret
 8cc:	27 b3       	in	r18, 0x17	; 23
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <DIO_vsetPINDir+0x70>
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	6a 95       	dec	r22
 8da:	e2 f7       	brpl	.-8      	; 0x8d4 <DIO_vsetPINDir+0x6c>
 8dc:	80 95       	com	r24
 8de:	82 23       	and	r24, r18
 8e0:	87 bb       	out	0x17, r24	; 23
 8e2:	08 95       	ret
 8e4:	41 30       	cpi	r20, 0x01	; 1
 8e6:	59 f4       	brne	.+22     	; 0x8fe <DIO_vsetPINDir+0x96>
 8e8:	24 b3       	in	r18, 0x14	; 20
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <DIO_vsetPINDir+0x8c>
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	6a 95       	dec	r22
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <DIO_vsetPINDir+0x88>
 8f8:	82 2b       	or	r24, r18
 8fa:	84 bb       	out	0x14, r24	; 20
 8fc:	08 95       	ret
 8fe:	24 b3       	in	r18, 0x14	; 20
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_vsetPINDir+0xa2>
 906:	88 0f       	add	r24, r24
 908:	99 1f       	adc	r25, r25
 90a:	6a 95       	dec	r22
 90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_vsetPINDir+0x9e>
 90e:	80 95       	com	r24
 910:	82 23       	and	r24, r18
 912:	84 bb       	out	0x14, r24	; 20
 914:	08 95       	ret
 916:	41 30       	cpi	r20, 0x01	; 1
 918:	59 f4       	brne	.+22     	; 0x930 <DIO_vsetPINDir+0xc8>
 91a:	21 b3       	in	r18, 0x11	; 17
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_vsetPINDir+0xbe>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	6a 95       	dec	r22
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_vsetPINDir+0xba>
 92a:	82 2b       	or	r24, r18
 92c:	81 bb       	out	0x11, r24	; 17
 92e:	08 95       	ret
 930:	21 b3       	in	r18, 0x11	; 17
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_vsetPINDir+0xd4>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_vsetPINDir+0xd0>
 940:	80 95       	com	r24
 942:	82 23       	and	r24, r18
 944:	81 bb       	out	0x11, r24	; 17
 946:	08 95       	ret

00000948 <DIO_write>:
 948:	82 34       	cpi	r24, 0x42	; 66
 94a:	19 f1       	breq	.+70     	; 0x992 <DIO_write+0x4a>
 94c:	18 f4       	brcc	.+6      	; 0x954 <DIO_write+0xc>
 94e:	81 34       	cpi	r24, 0x41	; 65
 950:	39 f0       	breq	.+14     	; 0x960 <DIO_write+0x18>
 952:	08 95       	ret
 954:	83 34       	cpi	r24, 0x43	; 67
 956:	b1 f1       	breq	.+108    	; 0x9c4 <DIO_write+0x7c>
 958:	84 34       	cpi	r24, 0x44	; 68
 95a:	09 f4       	brne	.+2      	; 0x95e <DIO_write+0x16>
 95c:	4c c0       	rjmp	.+152    	; 0x9f6 <DIO_write+0xae>
 95e:	08 95       	ret
 960:	41 30       	cpi	r20, 0x01	; 1
 962:	59 f4       	brne	.+22     	; 0x97a <DIO_write+0x32>
 964:	2b b3       	in	r18, 0x1b	; 27
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_write+0x28>
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	6a 95       	dec	r22
 972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_write+0x24>
 974:	82 2b       	or	r24, r18
 976:	8b bb       	out	0x1b, r24	; 27
 978:	08 95       	ret
 97a:	2b b3       	in	r18, 0x1b	; 27
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_write+0x3e>
 982:	88 0f       	add	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	6a 95       	dec	r22
 988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_write+0x3a>
 98a:	80 95       	com	r24
 98c:	82 23       	and	r24, r18
 98e:	8b bb       	out	0x1b, r24	; 27
 990:	08 95       	ret
 992:	41 30       	cpi	r20, 0x01	; 1
 994:	59 f4       	brne	.+22     	; 0x9ac <DIO_write+0x64>
 996:	28 b3       	in	r18, 0x18	; 24
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <DIO_write+0x5a>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	6a 95       	dec	r22
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <DIO_write+0x56>
 9a6:	82 2b       	or	r24, r18
 9a8:	88 bb       	out	0x18, r24	; 24
 9aa:	08 95       	ret
 9ac:	28 b3       	in	r18, 0x18	; 24
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_write+0x70>
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	6a 95       	dec	r22
 9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_write+0x6c>
 9bc:	80 95       	com	r24
 9be:	82 23       	and	r24, r18
 9c0:	88 bb       	out	0x18, r24	; 24
 9c2:	08 95       	ret
 9c4:	41 30       	cpi	r20, 0x01	; 1
 9c6:	59 f4       	brne	.+22     	; 0x9de <DIO_write+0x96>
 9c8:	25 b3       	in	r18, 0x15	; 21
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_write+0x8c>
 9d0:	88 0f       	add	r24, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	6a 95       	dec	r22
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_write+0x88>
 9d8:	82 2b       	or	r24, r18
 9da:	85 bb       	out	0x15, r24	; 21
 9dc:	08 95       	ret
 9de:	25 b3       	in	r18, 0x15	; 21
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_write+0xa2>
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	6a 95       	dec	r22
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_write+0x9e>
 9ee:	80 95       	com	r24
 9f0:	82 23       	and	r24, r18
 9f2:	85 bb       	out	0x15, r24	; 21
 9f4:	08 95       	ret
 9f6:	41 30       	cpi	r20, 0x01	; 1
 9f8:	59 f4       	brne	.+22     	; 0xa10 <DIO_write+0xc8>
 9fa:	22 b3       	in	r18, 0x12	; 18
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_write+0xbe>
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	6a 95       	dec	r22
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_write+0xba>
 a0a:	82 2b       	or	r24, r18
 a0c:	82 bb       	out	0x12, r24	; 18
 a0e:	08 95       	ret
 a10:	22 b3       	in	r18, 0x12	; 18
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <DIO_write+0xd4>
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	6a 95       	dec	r22
 a1e:	e2 f7       	brpl	.-8      	; 0xa18 <DIO_write+0xd0>
 a20:	80 95       	com	r24
 a22:	82 23       	and	r24, r18
 a24:	82 bb       	out	0x12, r24	; 18
 a26:	08 95       	ret

00000a28 <DIO_u8read>:
 a28:	82 34       	cpi	r24, 0x42	; 66
 a2a:	e9 f0       	breq	.+58     	; 0xa66 <DIO_u8read+0x3e>
 a2c:	18 f4       	brcc	.+6      	; 0xa34 <DIO_u8read+0xc>
 a2e:	81 34       	cpi	r24, 0x41	; 65
 a30:	31 f0       	breq	.+12     	; 0xa3e <DIO_u8read+0x16>
 a32:	55 c0       	rjmp	.+170    	; 0xade <DIO_u8read+0xb6>
 a34:	83 34       	cpi	r24, 0x43	; 67
 a36:	59 f1       	breq	.+86     	; 0xa8e <DIO_u8read+0x66>
 a38:	84 34       	cpi	r24, 0x44	; 68
 a3a:	e9 f1       	breq	.+122    	; 0xab6 <DIO_u8read+0x8e>
 a3c:	50 c0       	rjmp	.+160    	; 0xade <DIO_u8read+0xb6>
 a3e:	49 b3       	in	r20, 0x19	; 25
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	9c 01       	movw	r18, r24
 a46:	06 2e       	mov	r0, r22
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_u8read+0x26>
 a4a:	22 0f       	add	r18, r18
 a4c:	33 1f       	adc	r19, r19
 a4e:	0a 94       	dec	r0
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_u8read+0x22>
 a52:	84 2f       	mov	r24, r20
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	82 23       	and	r24, r18
 a58:	93 23       	and	r25, r19
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_u8read+0x38>
 a5c:	95 95       	asr	r25
 a5e:	87 95       	ror	r24
 a60:	6a 95       	dec	r22
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_u8read+0x34>
 a64:	08 95       	ret
 a66:	46 b3       	in	r20, 0x16	; 22
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	9c 01       	movw	r18, r24
 a6e:	06 2e       	mov	r0, r22
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_u8read+0x4e>
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	0a 94       	dec	r0
 a78:	e2 f7       	brpl	.-8      	; 0xa72 <DIO_u8read+0x4a>
 a7a:	84 2f       	mov	r24, r20
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	82 23       	and	r24, r18
 a80:	93 23       	and	r25, r19
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_u8read+0x60>
 a84:	95 95       	asr	r25
 a86:	87 95       	ror	r24
 a88:	6a 95       	dec	r22
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_u8read+0x5c>
 a8c:	08 95       	ret
 a8e:	43 b3       	in	r20, 0x13	; 19
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	9c 01       	movw	r18, r24
 a96:	06 2e       	mov	r0, r22
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_u8read+0x76>
 a9a:	22 0f       	add	r18, r18
 a9c:	33 1f       	adc	r19, r19
 a9e:	0a 94       	dec	r0
 aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_u8read+0x72>
 aa2:	84 2f       	mov	r24, r20
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	82 23       	and	r24, r18
 aa8:	93 23       	and	r25, r19
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_u8read+0x88>
 aac:	95 95       	asr	r25
 aae:	87 95       	ror	r24
 ab0:	6a 95       	dec	r22
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_u8read+0x84>
 ab4:	08 95       	ret
 ab6:	40 b3       	in	r20, 0x10	; 16
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	9c 01       	movw	r18, r24
 abe:	06 2e       	mov	r0, r22
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_u8read+0x9e>
 ac2:	22 0f       	add	r18, r18
 ac4:	33 1f       	adc	r19, r19
 ac6:	0a 94       	dec	r0
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_u8read+0x9a>
 aca:	84 2f       	mov	r24, r20
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	82 23       	and	r24, r18
 ad0:	93 23       	and	r25, r19
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_u8read+0xb0>
 ad4:	95 95       	asr	r25
 ad6:	87 95       	ror	r24
 ad8:	6a 95       	dec	r22
 ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_u8read+0xac>
 adc:	08 95       	ret
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	08 95       	ret

00000ae2 <DIO_set_port_direction>:
 ae2:	82 34       	cpi	r24, 0x42	; 66
 ae4:	59 f0       	breq	.+22     	; 0xafc <DIO_set_port_direction+0x1a>
 ae6:	18 f4       	brcc	.+6      	; 0xaee <DIO_set_port_direction+0xc>
 ae8:	81 34       	cpi	r24, 0x41	; 65
 aea:	31 f0       	breq	.+12     	; 0xaf8 <DIO_set_port_direction+0x16>
 aec:	08 95       	ret
 aee:	83 34       	cpi	r24, 0x43	; 67
 af0:	39 f0       	breq	.+14     	; 0xb00 <DIO_set_port_direction+0x1e>
 af2:	84 34       	cpi	r24, 0x44	; 68
 af4:	39 f0       	breq	.+14     	; 0xb04 <DIO_set_port_direction+0x22>
 af6:	08 95       	ret
 af8:	6a bb       	out	0x1a, r22	; 26
 afa:	08 95       	ret
 afc:	67 bb       	out	0x17, r22	; 23
 afe:	08 95       	ret
 b00:	64 bb       	out	0x14, r22	; 20
 b02:	08 95       	ret
 b04:	61 bb       	out	0x11, r22	; 17
 b06:	08 95       	ret

00000b08 <DIO_write_port>:
 b08:	82 34       	cpi	r24, 0x42	; 66
 b0a:	59 f0       	breq	.+22     	; 0xb22 <DIO_write_port+0x1a>
 b0c:	18 f4       	brcc	.+6      	; 0xb14 <DIO_write_port+0xc>
 b0e:	81 34       	cpi	r24, 0x41	; 65
 b10:	31 f0       	breq	.+12     	; 0xb1e <DIO_write_port+0x16>
 b12:	08 95       	ret
 b14:	83 34       	cpi	r24, 0x43	; 67
 b16:	39 f0       	breq	.+14     	; 0xb26 <DIO_write_port+0x1e>
 b18:	84 34       	cpi	r24, 0x44	; 68
 b1a:	39 f0       	breq	.+14     	; 0xb2a <DIO_write_port+0x22>
 b1c:	08 95       	ret
 b1e:	6b bb       	out	0x1b, r22	; 27
 b20:	08 95       	ret
 b22:	68 bb       	out	0x18, r22	; 24
 b24:	08 95       	ret
 b26:	65 bb       	out	0x15, r22	; 21
 b28:	08 95       	ret
 b2a:	62 bb       	out	0x12, r22	; 18
 b2c:	08 95       	ret

00000b2e <DIO_vconnectpullup>:
 b2e:	82 34       	cpi	r24, 0x42	; 66
 b30:	19 f1       	breq	.+70     	; 0xb78 <DIO_vconnectpullup+0x4a>
 b32:	18 f4       	brcc	.+6      	; 0xb3a <DIO_vconnectpullup+0xc>
 b34:	81 34       	cpi	r24, 0x41	; 65
 b36:	39 f0       	breq	.+14     	; 0xb46 <DIO_vconnectpullup+0x18>
 b38:	08 95       	ret
 b3a:	83 34       	cpi	r24, 0x43	; 67
 b3c:	b1 f1       	breq	.+108    	; 0xbaa <DIO_vconnectpullup+0x7c>
 b3e:	84 34       	cpi	r24, 0x44	; 68
 b40:	09 f4       	brne	.+2      	; 0xb44 <DIO_vconnectpullup+0x16>
 b42:	4c c0       	rjmp	.+152    	; 0xbdc <DIO_vconnectpullup+0xae>
 b44:	08 95       	ret
 b46:	41 30       	cpi	r20, 0x01	; 1
 b48:	59 f4       	brne	.+22     	; 0xb60 <DIO_vconnectpullup+0x32>
 b4a:	2b b3       	in	r18, 0x1b	; 27
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <DIO_vconnectpullup+0x28>
 b52:	88 0f       	add	r24, r24
 b54:	99 1f       	adc	r25, r25
 b56:	6a 95       	dec	r22
 b58:	e2 f7       	brpl	.-8      	; 0xb52 <DIO_vconnectpullup+0x24>
 b5a:	82 2b       	or	r24, r18
 b5c:	8b bb       	out	0x1b, r24	; 27
 b5e:	08 95       	ret
 b60:	2b b3       	in	r18, 0x1b	; 27
 b62:	81 e0       	ldi	r24, 0x01	; 1
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_vconnectpullup+0x3e>
 b68:	88 0f       	add	r24, r24
 b6a:	99 1f       	adc	r25, r25
 b6c:	6a 95       	dec	r22
 b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_vconnectpullup+0x3a>
 b70:	80 95       	com	r24
 b72:	82 23       	and	r24, r18
 b74:	8b bb       	out	0x1b, r24	; 27
 b76:	08 95       	ret
 b78:	41 30       	cpi	r20, 0x01	; 1
 b7a:	59 f4       	brne	.+22     	; 0xb92 <DIO_vconnectpullup+0x64>
 b7c:	28 b3       	in	r18, 0x18	; 24
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <DIO_vconnectpullup+0x5a>
 b84:	88 0f       	add	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	6a 95       	dec	r22
 b8a:	e2 f7       	brpl	.-8      	; 0xb84 <DIO_vconnectpullup+0x56>
 b8c:	82 2b       	or	r24, r18
 b8e:	88 bb       	out	0x18, r24	; 24
 b90:	08 95       	ret
 b92:	28 b3       	in	r18, 0x18	; 24
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_vconnectpullup+0x70>
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	6a 95       	dec	r22
 ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_vconnectpullup+0x6c>
 ba2:	80 95       	com	r24
 ba4:	82 23       	and	r24, r18
 ba6:	88 bb       	out	0x18, r24	; 24
 ba8:	08 95       	ret
 baa:	41 30       	cpi	r20, 0x01	; 1
 bac:	59 f4       	brne	.+22     	; 0xbc4 <DIO_vconnectpullup+0x96>
 bae:	25 b3       	in	r18, 0x15	; 21
 bb0:	81 e0       	ldi	r24, 0x01	; 1
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_vconnectpullup+0x8c>
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	6a 95       	dec	r22
 bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_vconnectpullup+0x88>
 bbe:	82 2b       	or	r24, r18
 bc0:	85 bb       	out	0x15, r24	; 21
 bc2:	08 95       	ret
 bc4:	25 b3       	in	r18, 0x15	; 21
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_vconnectpullup+0xa2>
 bcc:	88 0f       	add	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	6a 95       	dec	r22
 bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_vconnectpullup+0x9e>
 bd4:	80 95       	com	r24
 bd6:	82 23       	and	r24, r18
 bd8:	85 bb       	out	0x15, r24	; 21
 bda:	08 95       	ret
 bdc:	41 30       	cpi	r20, 0x01	; 1
 bde:	59 f4       	brne	.+22     	; 0xbf6 <DIO_vconnectpullup+0xc8>
 be0:	22 b3       	in	r18, 0x12	; 18
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vconnectpullup+0xbe>
 be8:	88 0f       	add	r24, r24
 bea:	99 1f       	adc	r25, r25
 bec:	6a 95       	dec	r22
 bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vconnectpullup+0xba>
 bf0:	82 2b       	or	r24, r18
 bf2:	82 bb       	out	0x12, r24	; 18
 bf4:	08 95       	ret
 bf6:	22 b3       	in	r18, 0x12	; 18
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_vconnectpullup+0xd4>
 bfe:	88 0f       	add	r24, r24
 c00:	99 1f       	adc	r25, r25
 c02:	6a 95       	dec	r22
 c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_vconnectpullup+0xd0>
 c06:	80 95       	com	r24
 c08:	82 23       	and	r24, r18
 c0a:	82 bb       	out	0x12, r24	; 18
 c0c:	08 95       	ret

00000c0e <write_high_nibble>:
	}
}

void write_high_nibble(uint8 portname,uint8 value)
{
	value<<=4;
 c0e:	62 95       	swap	r22
 c10:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 c12:	82 34       	cpi	r24, 0x42	; 66
 c14:	79 f0       	breq	.+30     	; 0xc34 <write_high_nibble+0x26>
 c16:	18 f4       	brcc	.+6      	; 0xc1e <write_high_nibble+0x10>
 c18:	81 34       	cpi	r24, 0x41	; 65
 c1a:	31 f0       	breq	.+12     	; 0xc28 <write_high_nibble+0x1a>
 c1c:	08 95       	ret
 c1e:	83 34       	cpi	r24, 0x43	; 67
 c20:	79 f0       	breq	.+30     	; 0xc40 <write_high_nibble+0x32>
 c22:	84 34       	cpi	r24, 0x44	; 68
 c24:	99 f0       	breq	.+38     	; 0xc4c <write_high_nibble+0x3e>
 c26:	08 95       	ret
	{
		case PORT_A:
		PORTA&=0x0f;
 c28:	8b b3       	in	r24, 0x1b	; 27
 c2a:	8f 70       	andi	r24, 0x0F	; 15
 c2c:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 c2e:	8b b3       	in	r24, 0x1b	; 27
 c30:	86 2b       	or	r24, r22
 c32:	8b bb       	out	0x1b, r24	; 27
		case PORT_B:
		PORTB&=0x0f;
 c34:	88 b3       	in	r24, 0x18	; 24
 c36:	8f 70       	andi	r24, 0x0F	; 15
 c38:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 c3a:	88 b3       	in	r24, 0x18	; 24
 c3c:	86 2b       	or	r24, r22
 c3e:	88 bb       	out	0x18, r24	; 24
		case PORT_C:
		PORTC&=0x0f;
 c40:	85 b3       	in	r24, 0x15	; 21
 c42:	8f 70       	andi	r24, 0x0F	; 15
 c44:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 c46:	85 b3       	in	r24, 0x15	; 21
 c48:	86 2b       	or	r24, r22
 c4a:	85 bb       	out	0x15, r24	; 21
		case PORT_D:
		PORTD&=0x0f;
 c4c:	82 b3       	in	r24, 0x12	; 18
 c4e:	8f 70       	andi	r24, 0x0F	; 15
 c50:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 c52:	82 b3       	in	r24, 0x12	; 18
 c54:	68 2b       	or	r22, r24
 c56:	62 bb       	out	0x12, r22	; 18
 c58:	08 95       	ret

00000c5a <timer2_overflow_init_interrupt>:


void timer2_overflow_init_interrupt(void)
{
	/* select timer clock */
	SET_BIT(ASSR,AS2);
 c5a:	82 b5       	in	r24, 0x22	; 34
 c5c:	88 60       	ori	r24, 0x08	; 8
 c5e:	82 bd       	out	0x22, r24	; 34
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
 c60:	85 b5       	in	r24, 0x25	; 37
 c62:	81 60       	ori	r24, 0x01	; 1
 c64:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
 c66:	85 b5       	in	r24, 0x25	; 37
 c68:	84 60       	ori	r24, 0x04	; 4
 c6a:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
 c6c:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
 c6e:	89 b7       	in	r24, 0x39	; 57
 c70:	80 64       	ori	r24, 0x40	; 64
 c72:	89 bf       	out	0x39, r24	; 57
 c74:	08 95       	ret

00000c76 <_exit>:
 c76:	f8 94       	cli

00000c78 <__stop_program>:
 c78:	ff cf       	rjmp	.-2      	; 0xc78 <__stop_program>
